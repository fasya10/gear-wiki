"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[1884],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var r=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var p=r.createContext({}),l=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,s=e.mdxType,o=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=l(n),g=s,d=u["".concat(p,".").concat(g)]||u[g]||m[g]||o;return n?r.createElement(d,a(a({ref:t},c),{},{components:n})):r.createElement(d,a({ref:t},c))}));function d(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var o=n.length,a=new Array(o);a[0]=g;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[u]="string"==typeof e?e:s,a[1]=i;for(var l=2;l<o;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},5395:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>a,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var r=n(7462),s=(n(7294),n(3905));const o={sidebar_label:"PING-PONG",sidebar_position:2},a="PING-PONG",i={unversionedId:"examples/ping",id:"examples/ping",title:"PING-PONG",description:"\u4f7f\u7528 Gear \u5199\u4ee3\u7801\u5f88\u5bb9\u6613\uff01",source:"@site/i18n/zh-cn/docusaurus-plugin-content-docs/current/examples/ping.md",sourceDirName:"examples",slug:"/examples/ping",permalink:"/zh-cn/docs/examples/ping",draft:!1,editUrl:"https://github.com/gear-tech/wiki/edit/master/docs/examples/ping.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_label:"PING-PONG",sidebar_position:2},sidebar:"docs",previous:{title:"\u524d\u671f\u51c6\u5907",permalink:"/zh-cn/docs/examples/prerequisites"},next:{title:"gFT (ERC-20)",permalink:"/zh-cn/docs/examples/gft-20"}},p={},l=[],c={toc:l},u="wrapper";function m(e){let{components:t,...n}=e;return(0,s.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"ping-pong"},"PING-PONG"),(0,s.kt)("p",null,"\u4f7f\u7528 Gear \u5199\u4ee3\u7801\u5f88\u5bb9\u6613\uff01"),(0,s.kt)("p",null,"\u8fd9\u662f\u4e00\u4e2a\u7ecf\u5178\u7684 Ping-pong \u5408\u7ea6\u5c0f\u7a0b\u5e8f\uff1a"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},'#![no_std]\n\nuse gstd::{debug, msg, prelude::*};\n\nstatic mut MESSAGE_LOG: Vec<String> = vec![];\n\n#[no_mangle]\nunsafe extern "C" fn handle() {\n    let new_msg = String::from_utf8(msg::load_bytes().expect("Unable to load bytes"))\n        .expect("Invalid message");\n\n    if new_msg == "PING" {\n        msg::reply_bytes("PONG", 0).unwrap();\n    }\n\n    MESSAGE_LOG.push(new_msg);\n\n    debug!("{:?} total message(s) stored: ", MESSAGE_LOG.len());\n\n    for log in MESSAGE_LOG.iter() {\n        debug!(log);\n    }\n}\n\n/// and a simple unit test:\n\n#[cfg(test)]\nmod tests {\n    extern crate std;\n\n    use gtest::{Log, Program, System};\n\n    #[test]\n    fn it_works() {\n        let system = System::new();\n        system.init_logger();\n\n        let program = Program::current(&system);\n\n        let res = program.send_bytes(42, "INIT");\n        assert!(res.log().is_empty());\n\n        let res = program.send_bytes(42, "PING");\n        let log = Log::builder().source(1).dest(42).payload_bytes("PONG");\n        assert!(res.contains(&log));\n    }\n}\n')),(0,s.kt)("p",null,"\u8be5\u7a0b\u5e8f\u53ea\u662f\u5c06 ",(0,s.kt)("inlineCode",{parentName:"p"},"PONG")," \u53d1\u56de\u5411\u5b83\u53d1\u9001 ",(0,s.kt)("inlineCode",{parentName:"p"},"PING"),"\u7684\u539f\u59cb\u53d1\u9001\u8005\u3002"),(0,s.kt)("p",null,"GitHub \u94fe\u63a5\uff1a",(0,s.kt)("a",{parentName:"p",href:"https://github.com/gear-dapps/ping"},"https://github.com/gear-dapps/ping")))}m.isMDXComponent=!0}}]);