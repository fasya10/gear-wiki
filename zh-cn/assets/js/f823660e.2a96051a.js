"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[9377],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,h=d["".concat(s,".").concat(m)]||d[m]||u[m]||i;return n?a.createElement(h,o(o({ref:t},p),{},{components:n})):a.createElement(h,o({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:r,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5723:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const i={sidebar_label:"Base Marketplace",sidebar_position:1},o="NFT Marketplace",l={unversionedId:"examples/nft-marketplace/marketplace",id:"examples/nft-marketplace/marketplace",title:"NFT Marketplace",description:"img alt",source:"@site/docs/examples/nft-marketplace/marketplace.md",sourceDirName:"examples/nft-marketplace",slug:"/examples/nft-marketplace/marketplace",permalink:"/zh-cn/docs/examples/nft-marketplace/marketplace",draft:!1,editUrl:"https://github.com/gear-tech/wiki/edit/master/docs/examples/nft-marketplace/marketplace.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_label:"Base Marketplace",sidebar_position:1},sidebar:"docs",previous:{title:"Concert (FT \u8f6c\u4e3a NFT)",permalink:"/zh-cn/docs/examples/concert"},next:{title:"Subsquid indexing",permalink:"/zh-cn/docs/examples/nft-marketplace/subsquid-marketplace"}},s={},c=[{value:"How to run",id:"how-to-run",level:2},{value:"\u2692\ufe0f Build programs",id:"\ufe0f-build-programs",level:3},{value:"\ud83c\udfd7\ufe0f Upload programs",id:"\ufe0f-upload-programs",level:3},{value:"\ud83d\udda5\ufe0f Run UI",id:"\ufe0f-run-ui",level:3},{value:"Marketplace contract logic",id:"marketplace-contract-logic",level:2},{value:"Logic",id:"logic",level:2},{value:"Listing NFTs, changing the price or stopping the sale.",id:"listing-nfts-changing-the-price-or-stopping-the-sale",level:3},{value:"NFT purchase.",id:"nft-purchase",level:3},{value:"NFT auction.",id:"nft-auction",level:3},{value:"Offers.",id:"offers",level:3},{value:"Consistency of contract states",id:"consistency-of-contract-states",level:2},{value:"Program metadata and state",id:"program-metadata-and-state",level:2}],p={toc:c},d="wrapper";function u(e){let{components:t,...i}=e;return(0,r.kt)(d,(0,a.Z)({},p,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"nft-marketplace"},"NFT Marketplace"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"img alt",src:n(2080).Z,width:"3427",height:"1737"})),(0,r.kt)("p",null,"NFT marketplace is a contract where you can buy and sell non-fungible tokens for fungible tokens. The contract also supports holding the NFT auctions and making/accepting purchase offers on NFTs."),(0,r.kt)("p",null,"A smart contract examples created by Gear are available on GitHub so anyone can easily create their own NFT marketplace application and run it on the Gear Network:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://github.com/gear-dapps/non-fungible-token/"},"Gear Non-Fungible Token"),". ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://github.com/gear-dapps/nft-marketplace"},"NFT marketplace"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Marketplace UI available on ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/gear-dapps/nft-marketplace/tree/master/frontend"},"Github")))),(0,r.kt)("h2",{id:"how-to-run"},"How to run"),(0,r.kt)("h3",{id:"\ufe0f-build-programs"},"\u2692\ufe0f Build programs"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Build ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/gear-dapps/non-fungible-token/"},"NFT contract")," as described in ",(0,r.kt)("inlineCode",{parentName:"li"},"README.md")),(0,r.kt)("li",{parentName:"ul"},"Build ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/gear-dapps/nft-marketplace/"},"Marketplace contract")," as described in ",(0,r.kt)("inlineCode",{parentName:"li"},"README.md"))),(0,r.kt)("h3",{id:"\ufe0f-upload-programs"},"\ud83c\udfd7\ufe0f Upload programs"),(0,r.kt)("p",null,"You can deploy a program using ",(0,r.kt)("a",{parentName:"p",href:"https://idea.gear-tech.io/"},"idea.gear-tech.io"),". In the network selector choose ",(0,r.kt)("inlineCode",{parentName:"p"},"Staging Testnet")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"Development")," (in this case, you should have a local node running)."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"}," Non-Fungible Token "))),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Upload program ",(0,r.kt)("inlineCode",{parentName:"li"},"nft.opt.wasm")," from ",(0,r.kt)("inlineCode",{parentName:"li"},"/target/wasm32-unknown-unknown/release/")),(0,r.kt)("li",{parentName:"ol"},"Upload metadata file ",(0,r.kt)("inlineCode",{parentName:"li"},"meta.txt")),(0,r.kt)("li",{parentName:"ol"},"Specify ",(0,r.kt)("inlineCode",{parentName:"li"},"init payload")," and calculate gas!")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Init payload:"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"name ",(0,r.kt)("inlineCode",{parentName:"li"},"Str")," - NFT collection name"),(0,r.kt)("li",{parentName:"ul"},"symbol ",(0,r.kt)("inlineCode",{parentName:"li"},"Str")," - NFT collection symbol"),(0,r.kt)("li",{parentName:"ul"},"base_uri ",(0,r.kt)("inlineCode",{parentName:"li"},"Str")," - NFT collection base URI"),(0,r.kt)("li",{parentName:"ul"},"royalties ",(0,r.kt)("inlineCode",{parentName:"li"},"Option<Royalties>")," - Optional param to specify accounts to pay royalties"))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"}," Marketplace "))),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Upload program ",(0,r.kt)("inlineCode",{parentName:"li"},"marketplace.opt.wasm")," from ",(0,r.kt)("inlineCode",{parentName:"li"},"/target/wasm32-unknown-unknown/release/")),(0,r.kt)("li",{parentName:"ol"},"Upload metadata file ",(0,r.kt)("inlineCode",{parentName:"li"},"meta.txt")),(0,r.kt)("li",{parentName:"ol"},"Specify ",(0,r.kt)("inlineCode",{parentName:"li"},"init payload")," and calculate gas!")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"InitMarket payload:"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"admin_id (ActorId) -  marketplace admin"),(0,r.kt)("li",{parentName:"ul"},"treasury_id (ActorId) - an account that receives a commission from sales on the marketplace"),(0,r.kt)("li",{parentName:"ul"},"treasury_fee (U16) -  sales commission"))),(0,r.kt)("h3",{id:"\ufe0f-run-ui"},"\ud83d\udda5\ufe0f Run UI"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Install packages")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"yarn install\n")),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"Configure .evn file. Specify network address and program ID like in the example below:")),(0,r.kt)("p",null,"For proper application functioning, one needs to adjust an environment variable parameters. An example is available ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/gear-tech/gear-js/blob/master/apps/marketplace/.env.example"},"here"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"REACT_APP_NODE_ADDRESS=wss://rpc-node.gear-tech.io:443\nREACT_APP_IPFS_ADDRESS=https://ipfs.gear-tech.io/api/v0\nREACT_APP_IPFS_GATEWAY_ADDRESS=https://ipfs-gw.gear-tech.io/ipfs\nREACT_APP_MARKETPLACE_CONTRACT_ADDRESS=0xf8e5add537887643f8aa1ee887754d9b2d8c20d4efd062d6c1dc673cbe390d6f\nREACT_APP_NFT_CONTRACT_ADDRESS=0xa7874ff27e9bac10bf7fd43f4908bb1e273018e15325c16fb35c71966c0c4033\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"REACT_APP_NODE_ADDRESS")," is Gear Network address (wss://rpc-node.gear-tech.io:443)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"REACT_APP_IPFS_ADDRESS")," is address of IPFS to store NFT assets (",(0,r.kt)("a",{parentName:"li",href:"https://ipfs.gear-tech.io/api/v0"},"https://ipfs.gear-tech.io/api/v0")," was used for Gear Marketplace implementation)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"REACT_APP_IPFS_GATEWAY_ADDRESS")," is IPFS Gateway address (",(0,r.kt)("a",{parentName:"li",href:"https://ipfs-gw.gear-tech.io/ipfs"},"https://ipfs-gw.gear-tech.io/ipfs"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"REACT_APP_MARKETPLACE_CONTRACT_ADDRESS")," is NFT Marketplace contract address in Gear Network"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"REACT_APP_NFT_CONTRACT_ADDRESS")," is Gear Non-Fungible Token contract address in Gear Network")),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},"Run app")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"yarn start\n")),(0,r.kt)("h2",{id:"marketplace-contract-logic"},"Marketplace contract logic"),(0,r.kt)("p",null,"This article explains the programming interface, data structure, basic functions and explains their purpose. It can be used as is or modified to suit your own scenarios."),(0,r.kt)("p",null,"To use the hashmap you should include ",(0,r.kt)("inlineCode",{parentName:"p"},"hashbrown")," package into your ",(0,r.kt)("em",{parentName:"p"},"Cargo.toml")," file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-toml"},'[dependencies]\n# ...\nhashbrown = "0.13.1"\n')),(0,r.kt)("h2",{id:"logic"},"Logic"),(0,r.kt)("p",null,"The contract state:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"use hashbrown::{HashMap, HashSet};\n\npub struct Market {\n    pub admin_id: ActorId,\n    pub treasury_id: ActorId,\n    pub treasury_fee: u128,\n    pub items: HashMap<ContractAndTokenId, Item>,\n    pub approved_nft_contracts: HashSet<ActorId>,\n    pub approved_ft_contracts: HashSet<ActorId>,\n    pub tx_id: TransactionId,\n}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"admin_id")," - an account who has the right to approve non-fungible-token and fungible-tokens contracts that can be used in the marketplace contract;"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"treasury_id")," - an account to which sales commission will be credited;"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"treasury_fee")," -\ncommission percentage (from 1 to 5 percent)\nThe marketplace contract is initialized with the following fields;"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"items")," - listed NFTs;"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"approved_nft_contracts")," - NFT contracts accounts that can be listed on the marketplace;"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"approved_ft_contracts")," -\nfungible token accounts for which it is possible to buy marketplace items;"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"tx_id")," - the id for tracking transactions in the fungible and non-fungible contracts (See the description of ",(0,r.kt)("a",{parentName:"li",href:"/zh-cn/docs/examples/gft-20"},"fungible token")," and ",(0,r.kt)("a",{parentName:"li",href:"/zh-cn/docs/examples/gnft-721"},"non-fungible token"),").")),(0,r.kt)("p",null,"The marketplace item has the following struct:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"pub struct Item {\n    pub owner: ActorId,\n    pub ft_contract_id: Option<ContractId>,\n    pub price: Option<Price>,\n    pub auction: Option<Auction>,\n    pub offers: BTreeMap<(Option<ContractId>, Price), ActorId>,\n    pub tx: Option<(TransactionId, MarketTx)>,\n}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"owner")," - an item owner;"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ft_contract_id")," - a contract of fungible tokens for which that item can be bought. If that field is ",(0,r.kt)("inlineCode",{parentName:"li"},"None")," then the item is on sale for native Gear value;"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"price")," -\nthe item price. ",(0,r.kt)("inlineCode",{parentName:"li"},"None")," field means that the item is not on the sale;"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"auction")," -\na field containing information on the current auction. ",(0,r.kt)("inlineCode",{parentName:"li"},"None")," field means that there is no current auction on the item;"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"offers")," -\npurchase offers made on that item;"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"tx")," - a pending transaction on the item. ",(0,r.kt)("inlineCode",{parentName:"li"},"None")," means that there are no pending transactions. ")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"MarketTx")," is an enum of possible transactions that can occur with NFT:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"#[derive(Debug, Encode, Decode, TypeInfo, Clone, PartialEq, Eq)]\npub enum MarketTx {\n    CreateAuction,\n    Bid {\n        account: ActorId,\n        price: Price,\n    },\n    SettleAuction,\n    Sale {\n        buyer: ActorId,\n    },\n    Offer {\n        ft_id: ContractId,\n        price: Price,\n        account: ActorId,\n    },\n    AcceptOffer,\n    Withdraw {\n        ft_id: ContractId,\n        price: Price,\n        account: ActorId,\n    },\n}\n")),(0,r.kt)("h3",{id:"listing-nfts-changing-the-price-or-stopping-the-sale"},"Listing NFTs, changing the price or stopping the sale."),(0,r.kt)("p",null,"To list NFT on the marketplace or modify the terms of sale send the following message: "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"/// Adds data on market item.\n/// If the item of that NFT does not exist on the marketplace then it will be listed.\n/// If the item exists then that action is used to change the price or suspend the sale.\n///\n/// # Requirements\n/// * [`msg::source()`](gstd::msg::source) must be the NFT owner\n/// * `nft_contract_id` must be added to `approved_nft_contracts`\n/// * if item already exists, then it cannot be changed if there is an active auction\n///\n/// On success replies [`MarketEvent::MarketDataAdded`].\nAddMarketData {\n    /// the NFT contract address\n    nft_contract_id: ContractId,\n    /// the fungible token contract address (If it is `None` then the item is traded for the native value)\n    ft_contract_id: Option<ContractId>,\n    /// the NFT id\n    token_id: TokenId,\n    /// the NFT price (if it is `None` then the item is not on the sale)\n    price: Option<Price>,\n}\n")),(0,r.kt)("h3",{id:"nft-purchase"},"NFT purchase."),(0,r.kt)("p",null,"To buy NFT send the following message: "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"/// Sells the NFT.\n/// \n/// # Requirements:\n/// * The NFT item must exist and be on sale.\n/// * If the NFT is sold for a native Gear value, then a buyer must attach a value equal to the price.\n/// * If the NFT is sold for fungible tokens then a buyer must have enough tokens in the fungible token contract.\n/// * There must be no open auction on the item.\n/// \n/// On success replies [`MarketEvent::ItemSold`].\nBuyItem {\n    /// NFT contract address\n    nft_contract_id: ContractId,\n    /// the token ID\n    token_id: TokenId,\n}\n")),(0,r.kt)("h3",{id:"nft-auction"},"NFT auction."),(0,r.kt)("p",null,"The marketplace contract includes the ",(0,r.kt)("em",{parentName:"p"},"English auction"),". ",(0,r.kt)("em",{parentName:"p"},"English auction")," is an open auction at an increasing price, where participants openly bid against each other, with each subsequent bid being greater than the previous one."),(0,r.kt)("p",null,"The auction has the following struct:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"pub struct Auction {\n    pub bid_period: u64,\n    pub started_at: u64,\n    pub ended_at: u64,\n    pub current_price: Price,\n    pub current_winner: ActorId,\n}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"bid_period")," - the time interval. If the auction ends before ",(0,r.kt)("inlineCode",{parentName:"li"},"exec::blocktimestamp() + bid_period")," then the auction end time is delayed for ",(0,r.kt)("inlineCode",{parentName:"li"},"bid_period"),";"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"started_at")," - auction start time;"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ended_at")," - auction end time;"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"current_price")," - the current offered price for the NFT;"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"current_winner")," - the current auction winner")),(0,r.kt)("p",null,"The auction is started with the following message:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"/// Creates an auction for selected item.\n/// If the NFT item doesn't exist on the marketplace then it will be listed\n///\n/// Requirements:\n/// * Only the item owner can start the auction.\n/// * `nft_contract_id` must be in the list of `approved_nft_contracts`\n/// *  There must be no active auction\n/// \n/// On success replies [`MarketEvent::AuctionCreated`].\nCreateAuction {\n    /// the NFT contract address\n    nft_contract_id: ContractId,\n    /// the fungible token contract address (If it is `None` then the item is traded for the native value)\n    ft_contract_id: Option<ContractId>,\n    /// the NFT id\n    token_id: TokenId,\n    /// the starting price\n    min_price: Price,\n    /// the time interval the auction is extended if bid is made if the auction ends before `exec::blocktimestamp() + bid_period`\n    bid_period: u64,\n    /// the auction duration\n    duration: u64,\n},\n")),(0,r.kt)("p",null,"To add bid to the current auction send the following message:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"/// Adds a bid to an ongoing auction.\n/// \n/// # Requirements:\n/// * The item must exist.\n/// * The auction must exist on the item.\n/// * If the NFT is sold for a native Gear value, then a buyer must attach a value equal to the price indicated in the arguments.\n/// * If the NFT is sold for fungible tokens then a buyer must have   enough tokens in the fungible token contract.\n/// * `price` must be greater than the current offered price for that item.\n///  \n/// On success replies [`MarketEvent::BidAdded`].\nAddBid {\n    /// the NFT contract address\n    nft_contract_id: ContractId,\n    /// * `token_id`: the NFT id\n    token_id: TokenId,\n    /// the offered price\n    price: Price,\n},\n")),(0,r.kt)("p",null,"If auction period is over then anyone can send message ",(0,r.kt)("inlineCode",{parentName:"p"},"SettleAuction")," that will send the NFT to the winner and pay to the owner:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"/// Settles the auction.\n/// \n/// Requirements:\n/// * The auction must be over.\n///   \n/// On successful auction replies [`MarketEvent::AuctionSettled`].\n/// If no bids were made replies [`MarketEvent::AuctionCancelled`].\nSettleAuction {\n    /// the NFT contract address\n    nft_contract_id: ContractId,\n    /// the NFT id\n    token_id: TokenId,\n}\n")),(0,r.kt)("h3",{id:"offers"},"Offers."),(0,r.kt)("p",null,"To make offer on the marketplace item send the following message:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"/// Adds a price offer to the item.\n/// \n/// Requirements:\n/// * NFT items must exist and be listed on the marketplace.\n/// * There must be no ongoing auction on the item.\n/// * If a user makes an offer in native Gear value, then he must attach a value equal to the price indicated in the arguments.\n/// * If a user makes an offer in fungible tokens then he must have  enough tokens in the fungible token contract.\n/// * The price can not be equal to 0.\n/// * There must be no identical offers on the item.\n///     \n/// On success replies [`MarketEvent::OfferAdded`].\nAddOffer {\n    /// the NFT contract address\n    nft_contract_id: ContractId,\n    /// the FT contract address (if it is `None, the offer is made for the native value)\n    ft_contract_id: Option<ContractId>,\n    /// the NFT id\n    token_id: TokenId,\n    /// the offer price\n    price: u128,\n},\n")),(0,r.kt)("p",null,"The item owner can accept the offer:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"/// Accepts an offer.\n/// \n/// Requirements:\n/// * NFT items must exist and be listed on the marketplace.\n/// * Only the owner can accept the offer.\n/// * There must be no ongoing auction.\n/// * The offer with indicated hash must exist.\n///      \n/// On success replies [`MarketEvent::OfferAccepted`].\nAcceptOffer {\n    /// the NFT contract address\n    nft_contract_id: ContractId,\n    /// the NFT id\n    token_id: TokenId,\n    /// the fungible token contract address\n    ft_contract_id: Option<ContractId>,\n    /// the offer price\n    price: Price,\n}\n")),(0,r.kt)("p",null,"The user who made the offer can also withdraw his tokens:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"/// Withdraws tokens.\n/// \n/// Requirements:\n/// * NFT items must exist and be listed on the marketplace.\n/// * Only the offer creator can withdraw his tokens.\n/// * The offer with indicated hash must exist.\n/// \n/// On success replies [`MarketEvent::TokensWithdrawn`].\nWithdraw {\n    /// the NFT contract address\n    nft_contract_id: ContractId,\n    /// the FT contract address (if it is `None, the offer is made for the native value)\n    ft_contract_id: Option<ContractId>,\n    /// the NFT id\n    token_id: TokenId,\n    /// The offered price (native value)\n    price: Price,\n},\n")),(0,r.kt)("h2",{id:"consistency-of-contract-states"},"Consistency of contract states"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"market")," contract interacts with ",(0,r.kt)("inlineCode",{parentName:"p"},"fungible")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"non-fungible")," token contracts. Each transaction that changes the states of several contracts is stored in the state until it is completed. Every time a user interacts with an item, the marketplace contract checks for an pending transaction and, if there is one, asks the user to complete it, not allowing to start a new one. The idempotency of the token contracts allows to restart a transaction without duplicate changes which guarantees the state consistency of 3 contracts."),(0,r.kt)("h2",{id:"program-metadata-and-state"},"Program metadata and state"),(0,r.kt)("p",null,"Metadata interface description:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"pub struct MarketMetadata;\n\nimpl Metadata for MarketMetadata {\n    type Init = In<InitMarket>;\n    type Handle = InOut<MarketAction, MarketEvent>;\n    type Others = ();\n    type Reply = ();\n    type Signal = ();\n    type State = Market;\n}\n")),(0,r.kt)("p",null,"To display the full contract state information, the ",(0,r.kt)("inlineCode",{parentName:"p"},"state()")," function is used:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'#[no_mangle]\nextern "C" fn state() {\n    msg::reply(\n        unsafe {\n            let market = MARKET.as_ref().expect("Uninitialized market state");\n            &(*market).clone()\n        },\n        0,\n    )\n    .expect("Failed to share state");\n}\n')),(0,r.kt)("p",null,"To display only necessary certain values from the state, you need to write a separate crate. In this crate, specify functions that will return the desired values from the ",(0,r.kt)("inlineCode",{parentName:"p"},"Market")," state. For example - ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/gear-dapps/nft-marketplace/tree/master/state"},"gear-dapps/nft-marketplace/state"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"#[metawasm]\npub trait Metawasm {\n    type State = <MarketMetadata as Metadata>::State;\n\n    fn all_items(state: Self::State) -> Vec<Item> {\n        ...\n    }\n\n    fn item_info(args: ItemInfoArgs, state: Self::State) -> Item {\n        ...\n    }\n}\n")))}u.isMDXComponent=!0},2080:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/nft-marketplace-dfbe4242ab3d0b0ce94fbe03658186ab.png"}}]);