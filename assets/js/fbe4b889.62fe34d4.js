"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[3129],{3905:(e,n,r)=>{r.d(n,{Zo:()=>l,kt:()=>g});var t=r(7294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function s(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function o(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?s(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function i(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},s=Object.keys(e);for(t=0;t<s.length;t++)r=s[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(t=0;t<s.length;t++)r=s[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=t.createContext({}),c=function(e){var n=t.useContext(p),r=n;return e&&(r="function"==typeof e?e(n):o(o({},n),e)),r},l=function(e){var n=c(e.components);return t.createElement(p.Provider,{value:n},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,s=e.originalType,p=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),d=c(r),u=a,g=d["".concat(p,".").concat(u)]||d[u]||m[u]||s;return r?t.createElement(g,o(o({ref:n},l),{},{components:r})):t.createElement(g,o({ref:n},l))}));function g(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var s=r.length,o=new Array(s);o[0]=u;var i={};for(var p in n)hasOwnProperty.call(n,p)&&(i[p]=n[p]);i.originalType=e,i[d]="string"==typeof e?e:a,o[1]=i;for(var c=2;c<s;c++)o[c]=r[c];return t.createElement.apply(null,o)}return t.createElement.apply(null,r)}u.displayName="MDXCreateElement"},7195:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>m,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var t=r(7462),a=(r(7294),r(3905));const s={sidebar_position:6,sidebar_label:"Send Message"},o="Send Message",i={unversionedId:"api/send-message",id:"api/send-message",title:"Send Message",description:"Use GearApi.message.send method to send messages to the program:",source:"@site/docs/api/send-message.mdx",sourceDirName:"api",slug:"/api/send-message",permalink:"/docs/api/send-message",draft:!1,editUrl:"https://github.com/gear-tech/wiki/edit/master/docs/api/send-message.mdx",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6,sidebar_label:"Send Message"},sidebar:"docs",previous:{title:"Upload Code",permalink:"/docs/api/submit-code"},next:{title:"Read State",permalink:"/docs/api/read-state"}},p={},c=[{value:"Send reply message",id:"send-reply-message",level:3}],l={toc:c},d="wrapper";function m(e){let{components:n,...r}=e;return(0,a.kt)(d,(0,t.Z)({},l,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"send-message"},"Send Message"),(0,a.kt)("p",null,"Use ",(0,a.kt)("inlineCode",{parentName:"p"},"GearApi.message.send")," method to send messages to the program:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"try {\n  const message = {\n    destination: destination, // programId\n    payload: somePayload,\n    gasLimit: 10000000,\n    value: 1000,\n  };\n  // In that case payload will be encoded using meta.types.handle.input type\n  let extrinsic = gearApi.message.send(message, meta);\n  // So if you want to use another type you can specify it\n  extrinsic = gearApi.message.send(message, meta, meta.types.other.input);\n} catch (error) {\n  console.error(`${error.name}: ${error.message}`);\n}\ntry {\n  await extrinsic.signAndSend(keyring, (event) => {\n    console.log(event.toHuman());\n  });\n} catch (error) {\n  console.error(`${error.name}: ${error.message}`);\n}\n")),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"In real conditions to ensure successful message processing, the calculation of the required gas for processing the message should be performed by using ",(0,a.kt)("inlineCode",{parentName:"p"},"GearApi.program.calculateGas")," method."),(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("a",{parentName:"p",href:"/docs/api/calculate-gas"},"more info"))),(0,a.kt)("h3",{id:"send-reply-message"},"Send reply message"),(0,a.kt)("p",null,"When you need to reply to a message received from a program, use ",(0,a.kt)("inlineCode",{parentName:"p"},"GearApi.message.reply"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"try {\n  const reply = {\n    replyToId: messageId,\n    payload: somePayload,\n    gasLimit: 10000000,\n    value: 1000,\n  };\n  // In this case payload will be encoded using `meta.types.reply.input` type.\n  const extrinsic = gearApi.message.sendReply(reply, meta);\n} catch (error) {\n  console.error(`${error.name}: ${error.message}`);\n}\ntry {\n  await extrinsic(keyring, (events) => {\n    console.log(event.toHuman());\n  });\n} catch (error) {\n  console.error(`${error.name}: ${error.message}`);\n}\n")))}m.isMDXComponent=!0}}]);