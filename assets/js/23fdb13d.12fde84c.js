"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[3164],{5162:(e,t,a)=>{a.d(t,{Z:()=>o});var n=a(7294),r=a(6010);const l={tabItem:"tabItem_Ymn6"};function o(e){let{children:t,hidden:a,className:o}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(l.tabItem,o),hidden:a},t)}},4866:(e,t,a)=>{a.d(t,{Z:()=>N});var n=a(7462),r=a(7294),l=a(6010),o=a(2466),i=a(6550),s=a(1980),u=a(7392),p=a(12);function d(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:a,attributes:n,default:r}}=e;return{value:t,label:a,attributes:n,default:r}}))}function c(e){const{values:t,children:a}=e;return(0,r.useMemo)((()=>{const e=t??d(a);return function(e){const t=(0,u.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,a])}function m(e){let{value:t,tabValues:a}=e;return a.some((e=>e.value===t))}function g(e){let{queryString:t=!1,groupId:a}=e;const n=(0,i.k6)(),l=function(e){let{queryString:t=!1,groupId:a}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:t,groupId:a});return[(0,s._X)(l),(0,r.useCallback)((e=>{if(!l)return;const t=new URLSearchParams(n.location.search);t.set(l,e),n.replace({...n.location,search:t.toString()})}),[l,n])]}function h(e){const{defaultValue:t,queryString:a=!1,groupId:n}=e,l=c(e),[o,i]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=a.find((e=>e.default))??a[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:l}))),[s,u]=g({queryString:a,groupId:n}),[d,h]=function(e){let{groupId:t}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(t),[n,l]=(0,p.Nk)(a);return[n,(0,r.useCallback)((e=>{a&&l.set(e)}),[a,l])]}({groupId:n}),k=(()=>{const e=s??d;return m({value:e,tabValues:l})?e:null})();(0,r.useLayoutEffect)((()=>{k&&i(k)}),[k]);return{selectedValue:o,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);i(e),u(e),h(e)}),[u,h,l]),tabValues:l}}var k=a(2389);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function y(e){let{className:t,block:a,selectedValue:i,selectValue:s,tabValues:u}=e;const p=[],{blockElementScrollPositionUntilNextRender:d}=(0,o.o5)(),c=e=>{const t=e.currentTarget,a=p.indexOf(t),n=u[a].value;n!==i&&(d(t),s(n))},m=e=>{let t=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const a=p.indexOf(e.currentTarget)+1;t=p[a]??p[0];break}case"ArrowLeft":{const a=p.indexOf(e.currentTarget)-1;t=p[a]??p[p.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":a},t)},u.map((e=>{let{value:t,label:a,attributes:o}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:e=>p.push(e),onKeyDown:m,onClick:c},o,{className:(0,l.Z)("tabs__item",b.tabItem,o?.className,{"tabs__item--active":i===t})}),a??t)})))}function f(e){let{lazy:t,children:a,selectedValue:n}=e;const l=(Array.isArray(a)?a:[a]).filter(Boolean);if(t){const e=l.find((e=>e.props.value===n));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},l.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==n}))))}function v(e){const t=h(e);return r.createElement("div",{className:(0,l.Z)("tabs-container",b.tabList)},r.createElement(y,(0,n.Z)({},e,t)),r.createElement(f,(0,n.Z)({},e,t)))}function N(e){const t=(0,k.Z)();return r.createElement(v,(0,n.Z)({key:String(t)},e))}},8278:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>g,frontMatter:()=>i,metadata:()=>u,toc:()=>d});var n=a(7462),r=(a(7294),a(3905)),l=a(4866),o=a(5162);a(4464);const i={sidebar_label:"Setting Up",sidebar_position:1},s="Setting Up Gear Node",u={unversionedId:"node/setting-up",id:"node/setting-up",title:"Setting Up Gear Node",description:"Introduction",source:"@site/docs/node/setting-up.mdx",sourceDirName:"node",slug:"/node/setting-up",permalink:"/docs/node/setting-up",draft:!1,editUrl:"https://github.com/gear-tech/wiki/edit/master/docs/node/setting-up.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_label:"Setting Up",sidebar_position:1},sidebar:"docs",previous:{title:"Getting Started",permalink:"/docs/getting-started-in-5-minutes"},next:{title:"Node as a Service",permalink:"/docs/node/node-as-service"}},p={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Install with pre-build binary",id:"install-with-pre-build-binary",level:2},{value:"Compile Gear node by yourself",id:"compile-gear-node-by-yourself",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Install Rust:",id:"install-rust",level:3},{value:"Install Wasm Toolchains:",id:"install-wasm-toolchains",level:3},{value:"Clone Gear repo",id:"clone-gear-repo",level:3},{value:"Compile",id:"compile",level:3},{value:"Run Gear Node",id:"run-gear-node",level:2},{value:"Command Flags and Options",id:"command-flags-and-options",level:2},{value:"Special environment variables",id:"special-environment-variables",level:2}],c={toc:d},m="wrapper";function g(e){let{components:t,...a}=e;return(0,r.kt)(m,(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"setting-up-gear-node"},"Setting Up Gear Node"),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"This guide covers the steps required to install and run the Gear node."),(0,r.kt)("p",null,"There are two ways to get started with the Gear node. First, you can download a pre-built binary file and run it, or second, you can compile the binary file and configure it by yourself. Using a ready-made build is a quick and convenient way to get started as you can skip the installation of Rust and all its dependencies and you can also skip the node compiling process. On the other hand, if you decide that you want to go through the process of creating your development node, it may take about twenty minutes or more depending on your hardware."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("h3",{parentName:"admonition",id:"system-requirements"},"System requirements:"),(0,r.kt)("p",{parentName:"admonition"},"Gear node doesn't have any special hardware requirements excepting at least 64 Gbytes of free space on the SSD disk.")),(0,r.kt)("h2",{id:"install-with-pre-build-binary"},"Install with pre-build binary"),(0,r.kt)("p",null,"Depending on your OS you need to download nightly build of Gear node:"),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"mac-linux",label:"Linux x64",mdxType:"TabItem"},(0,r.kt)("p",null,"Terminal:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"curl https://get.gear.rs/gear-nightly-linux-x86_64.tar.xz | tar xJ\n")),(0,r.kt)("p",null,"or"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Linux x64"),": ",(0,r.kt)("a",{parentName:"p",href:"https://get.gear.rs/gear-nightly-linux-x86_64.tar.xz"},"gear-nightly-linux-x86_64.tar.xz")),(0,r.kt)("p",null,"You can try to run the node:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\u276f ./gear --version\ngear 0.1.0-hashcode\n"))),(0,r.kt)(o.Z,{value:"mac-arm",label:"MacOS ARM",mdxType:"TabItem"},(0,r.kt)("p",null,"Terminal:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"curl https://get.gear.rs/gear-nightly-aarch64-apple-darwin.tar.xz | tar xJ\n")),(0,r.kt)("p",null,"or"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"macOS M1/M2"),": ",(0,r.kt)("a",{parentName:"p",href:"https://get.gear.rs/gear-nightly-aarch64-apple-darwin.tar.xz"},"gear-nightly-aarch64-apple-darwin.tar.xz")),(0,r.kt)("p",null,"You can try to run the node:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\u276f ./gear --version\ngear 0.1.0-hashcode\n"))),(0,r.kt)(o.Z,{value:"mac-intel",label:"macOS x64",mdxType:"TabItem"},(0,r.kt)("p",null,"Terminal:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"curl https://get.gear.rs/gear-nightly-x86_64-apple-darwin.tar.xz | tar xJ\n")),(0,r.kt)("p",null,"or"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"macOS Intel x64"),": ",(0,r.kt)("a",{parentName:"p",href:"https://get.gear.rs/gear-nightly-x86_64-apple-darwin.tar.xz"},"gear-nightly-x86_64-apple-darwin.tar.xz")),(0,r.kt)("p",null,"You can try to run the node:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\u276f ./gear --version\ngear 0.1.0-hashcode\n"))),(0,r.kt)(o.Z,{value:"win64",label:"Windows x64",className:"unique-tabs",default:!0,mdxType:"TabItem"},(0,r.kt)("p",null,"Terminal:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"curl -O https://get.gear.rs/gear-nightly-x86_64-pc-windows-msvc.zip\n")),(0,r.kt)("p",null,"or"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Windows x64"),": ",(0,r.kt)("a",{parentName:"p",href:"https://get.gear.rs/gear-nightly-x86_64-pc-windows-msvc.zip"},"gear-nightly-x86_64-pc-windows-msvc.zip")),(0,r.kt)("p",null,"Unzip the downloaded package then you can try to run the node:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\u276f gear.exe --version\ngear.exe 0.1.0-hashcode\n")))),(0,r.kt)("h2",{id:"compile-gear-node-by-yourself"},"Compile Gear node by yourself"),(0,r.kt)("p",null,"Compiling the build will take some time and requires the installation of some dependencies."),(0,r.kt)("admonition",{title:"Note",type:"warning"},(0,r.kt)("p",{parentName:"admonition"},"Windows users may encounter some problems related to the installation of Rust components and dependencies.\nIt is highly recommended to use Linux or macOS for compiling Gear node and smart-contracts.")),(0,r.kt)("h3",{id:"prerequisites"},"Prerequisites"),(0,r.kt)("p",null,"Linux users should generally install ",(0,r.kt)("inlineCode",{parentName:"p"},"GCC")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Clang"),", according to their distribution\u2019s documentation. Also, one should install ",(0,r.kt)("inlineCode",{parentName:"p"},"binaryen")," toolset that contains required ",(0,r.kt)("inlineCode",{parentName:"p"},"wasm-opt")," tool."),(0,r.kt)("p",null,"For example, on Ubuntu use:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo apt install -y clang build-essential binaryen cmake protobuf-compiler\n")),(0,r.kt)("p",null,"On macOS, you can get a compiler toolset and ",(0,r.kt)("inlineCode",{parentName:"p"},"binaryen")," by running:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"xcode-select --install\nbrew install binaryen\n")),(0,r.kt)("h3",{id:"install-rust"},"Install Rust:"),(0,r.kt)("p",null,"If you already have Rust installed, you can skip this step."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n")),(0,r.kt)("p",null,"And then you should reboot your terminal."),(0,r.kt)("h3",{id:"install-wasm-toolchains"},"Install Wasm Toolchains:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"rustup toolchain add nightly\nrustup target add wasm32-unknown-unknown --toolchain nightly\n")),(0,r.kt)("h3",{id:"clone-gear-repo"},"Clone Gear repo"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/gear-tech/gear.git\ncd gear\ngit checkout testnet\n\n## Optional\n## If you need to use the latest or experimental Gear functions,\n## you should compile `gear-node` from `master` branch.\n")),(0,r.kt)("h3",{id:"compile"},"Compile"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cargo build -p gear-cli --release\n")),(0,r.kt)("p",null,"or"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"make node-release\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"You can find the final build at the following location: ",(0,r.kt)("inlineCode",{parentName:"p"},"gear/target/release/gear")),(0,r.kt)("p",{parentName:"admonition"},"Go to:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cd target/release\n"))),(0,r.kt)("h2",{id:"run-gear-node"},"Run Gear Node"),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"It doesn't matter if you downloaded the prebuild binary or built it yourself. Being in the directory where the gear node is installed to run it without special arguments to get a node connected to the testnet:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"./gear\n")),(0,r.kt)("p",null,"To run Gear node in dev mode use the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"./gear --dev\n")),(0,r.kt)("h2",{id:"command-flags-and-options"},"Command Flags and Options"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-code"},"gear [subcommand] [options]\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"--chain=staging")),(0,r.kt)("p",{parentName:"li"},"Connect the node to Gear testnet (default option).")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"--dev")),(0,r.kt)("p",{parentName:"li"},"Run standalone node of Gear network.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"purge-chain")),(0,r.kt)("p",{parentName:"li"},"Remove storage of the selected chain type. Needs to specify the chain connection type ",(0,r.kt)("inlineCode",{parentName:"p"},"--chain=staging")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"--dev"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"help"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"--help")),(0,r.kt)("p",{parentName:"li"},"Print the available subcommands/options or the help of the given subcommand."))),(0,r.kt)("h2",{id:"special-environment-variables"},"Special environment variables"),(0,r.kt)("p",null,"To run Gear node with logs from contracts use:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-code"},'RUST_LOG="gwasm=debug" gear [subcommand] [options]\n')))}g.isMDXComponent=!0}}]);