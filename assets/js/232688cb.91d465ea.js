"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[155],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>f});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var p=r.createContext({}),l=function(e){var t=r.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},c=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=l(a),u=n,f=d["".concat(p,".").concat(u)]||d[u]||m[u]||o;return a?r.createElement(f,i(i({ref:t},c),{},{components:a})):r.createElement(f,i({ref:t},c))}));function f(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,i=new Array(o);i[0]=u;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[d]="string"==typeof e?e:n,i[1]=s;for(var l=2;l<o;l++)i[l]=a[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}u.displayName="MDXCreateElement"},6332:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var r=a(7462),n=(a(7294),a(3905));const o={sidebar_position:7,sidebar_label:"Read State"},i="Read State",s={unversionedId:"api/read-state",id:"api/read-state",title:"Read State",description:"There are two different ways to query the program State:",source:"@site/docs/api/read-state.md",sourceDirName:"api",slug:"/api/read-state",permalink:"/docs/api/read-state",draft:!1,editUrl:"https://github.com/gear-tech/wiki/edit/master/docs/api/read-state.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7,sidebar_label:"Read State"},sidebar:"docs",previous:{title:"Send Message",permalink:"/docs/api/send-message"},next:{title:"Metadata & Type Creation",permalink:"/docs/api/metadata-type-creation"}},p={},l=[{value:"Cookbook",id:"cookbook",level:2}],c={toc:l},d="wrapper";function m(e){let{components:t,...a}=e;return(0,n.kt)(d,(0,r.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"read-state"},"Read State"),(0,n.kt)("p",null,"There are two different ways to query the program ",(0,n.kt)("inlineCode",{parentName:"p"},"State"),":"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Query the full ",(0,n.kt)("inlineCode",{parentName:"li"},"State")," of the program. To read the full ",(0,n.kt)("inlineCode",{parentName:"li"},"State")," of the program, you need to have only the ",(0,n.kt)("inlineCode",{parentName:"li"},"metadata")," of this program. You can call ",(0,n.kt)("inlineCode",{parentName:"li"},"gearApi.programState.read")," method to get the state.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},"import { GearApi } from '@gear-js/api';\nconst gearApi = await GearApi.create({\n  providerAddress: 'wss://testnet.vara.rs',\n});\nawait gearApi.programState.read({ programId: '0x\u2026' }, programMetadata);\n")),(0,n.kt)("p",null,"Also, you can read the ",(0,n.kt)("inlineCode",{parentName:"p"},"State")," of the program at some specific block specified by its hash:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},"await gearApi.programState.read(\n  { programId: '0x\u2026', at: '0x\u2026' },\n  programMetadata,\n);\n")),(0,n.kt)("ol",{start:2},(0,n.kt)("li",{parentName:"ol"},"If you are using the custom functions to query only specific parts of the program State (",(0,n.kt)("a",{parentName:"li",href:"/docs/developing-contracts/metadata#genarate-metadata"},"see more"),"), then you should call ",(0,n.kt)("inlineCode",{parentName:"li"},"GearApi.programState.readUsingWasm")," method:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"// ...\nimport { getStateMetadata } from '@gear-js/api';\nconst stateWasm = readFileSync('path/to/state.meta.wasm');\nconst metadata = await getStateMetadata(stateWasm);\n\nconst state = await gearApi.programState.readUsingWasm(\n  {\n    programId: '0x\u2026',\n    fn_name: 'name_of_function_to_execute',\n    stateWasm,\n    argument: { input: 'payload' },\n  },\n  metadata,\n);\n")),(0,n.kt)("h2",{id:"cookbook"},"Cookbook"),(0,n.kt)("p",null,"To read state in JavaScript applications you can use ",(0,n.kt)("inlineCode",{parentName:"p"},"fetch")," browser API to get buffer from ",(0,n.kt)("inlineCode",{parentName:"p"},"meta.wasm"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},"// ...\n\nconst res = await fetch(metaFile);\nconst arrayBuffer = await res.arrayBuffer();\nconst buffer = await Buffer.from(arrayBuffer);\nconst metadata = await getStateMetadata(buffer);\n\n// get State only of the first wallet\nconst firstState = await gearApi.programState.readUsingWasm(\n  { programId: '0x\u2026', fn_name: 'first_wallet', buffer },\n  metadata,\n);\n\n// get wallet State by id\nconst secondState = await gearApi.programState.readUsingWasm(\n  { programId: '0x\u2026', fn_name: 'wallet_by_id', buffer,  argument: { decimal: 1, hex: '0x01' } },\n  metadata,\n);\n\n")))}m.isMDXComponent=!0}}]);