"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[9196],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>f});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),u=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},p=function(e){var t=u(e.components);return n.createElement(l.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=u(a),d=r,f=c["".concat(l,".").concat(d)]||c[d]||m[d]||o;return a?n.createElement(f,s(s({ref:t},p),{},{components:a})):n.createElement(f,s({ref:t},p))}));function f(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,s=new Array(o);s[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[c]="string"==typeof e?e:r,s[1]=i;for(var u=2;u<o;u++)s[u]=a[u];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},6178:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>u});var n=a(7462),r=(a(7294),a(3905));const o={sidebar_position:3,sidebar_label:"React-hooks"},s="Gear React-hooks",i={unversionedId:"api/tooling/react-hooks",id:"api/tooling/react-hooks",title:"Gear React-hooks",description:"Hooks allow functional components to have access to programs running on Gear networks and significantly simplify the development of front-end applications.",source:"@site/docs/api/tooling/react-hooks.md",sourceDirName:"api/tooling",slug:"/api/tooling/react-hooks",permalink:"/docs/api/tooling/react-hooks",draft:!1,editUrl:"https://github.com/gear-tech/wiki/edit/master/docs/api/tooling/react-hooks.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,sidebar_label:"React-hooks"},sidebar:"docs",previous:{title:"Meta CLI",permalink:"/docs/api/tooling/meta-cli"},next:{title:"Web3",permalink:"/docs/general/web3"}},l={},u=[{value:"Installation",id:"installation",level:2},{value:"Getting started",id:"getting-started",level:2},{value:"Cookbook",id:"cookbook",level:2},{value:"useApi",id:"useapi",level:3},{value:"useAccount",id:"useaccount",level:3},{value:"useAlert",id:"usealert",level:3},{value:"useMetadata",id:"usemetadata",level:3},{value:"useWasmMetadata",id:"usewasmmetadata",level:3},{value:"useSendMessage",id:"usesendmessage",level:3},{value:"useReadFullState",id:"usereadfullstate",level:3},{value:"useReadWasmState",id:"usereadwasmstate",level:3},{value:"useCreateHandler",id:"usecreatehandler",level:3}],p={toc:u},c="wrapper";function m(e){let{components:t,...a}=e;return(0,r.kt)(c,(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"gear-react-hooks"},"Gear React-hooks"),(0,r.kt)("p",null,"Hooks allow functional components to have access to programs running on Gear networks and significantly simplify the development of front-end applications."),(0,r.kt)("p",null,"For example, refer to ",(0,r.kt)("a",{parentName:"p",href:"/docs/examples/nft-marketplace/nft-application"},"this article")," that demonstrates the creation of a React application that connects to an ",(0,r.kt)("a",{parentName:"p",href:"/docs/examples/gnft-721"},"NFT smart contract")," running on the blockchain."),(0,r.kt)("h2",{id:"installation"},"Installation"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"npm install @gear-js/react-hooks\n")),(0,r.kt)("p",null,"or"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"yarn add @gear-js/react-hooks\n")),(0,r.kt)("h2",{id:"getting-started"},"Getting started"),(0,r.kt)("p",null,"Simple as it is, here's a quick example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { useReadFullState } from '@gear-js/react-hooks';\nimport { useMetadata } from './use-metadata'\n\nimport meta from 'assets/meta/meta.txt';\n\nfunction State() {\n  const programId = '0x01';\n  const { metadata } = useMetadata(meta);\n\n  const { state } = useReadFullState(programId, meta);\n\n  return <div>{JSON.stringify(state)}</div>;\n}\n\nexport { State };\n")),(0,r.kt)("h2",{id:"cookbook"},"Cookbook"),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"In order for these hooks to work, the application must be wrapped in the appropriate Providers. As it is presented in the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/gear-tech/gear-js/blob/main/utils/create-gear-app/gear-app-template/template/src/hocs/index.tsx"},"example"),". If you use ",(0,r.kt)("inlineCode",{parentName:"p"},"create-gear-app"),", then all the necessary environment has already been provided.")),(0,r.kt)("h3",{id:"useapi"},"useApi"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"useApi")," provides access to the Gear API connected to the selected RPC-node."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import { useApi } from '@gear-js/react-hooks';\n\nconst { api, isApiReady } = useApi();\n")),(0,r.kt)("h3",{id:"useaccount"},"useAccount"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"useAccount")," provides interaction with ",(0,r.kt)("inlineCode",{parentName:"p"},"Polkadot-js")," extension API, allows to manage accounts from it (for example to sign transactions)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import { useAccount } from '@gear-js/react-hooks';\n\nconst { account, isAccountReady } = useAccount();\n")),(0,r.kt)("h3",{id:"usealert"},"useAlert"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"useAlert")," shows any alert in the application context."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import { useAlert } from '@gear-js/react-hooks';\n\nconst alert = useAlert();\n\n// type?: 'info' | 'error' | 'loading' | 'success';\nalert.success('success message')\n")),(0,r.kt)("h3",{id:"usemetadata"},"useMetadata"),(0,r.kt)("p",null,"This hook is auxiliary and it is not pre-installed in the react-hook library. ",(0,r.kt)("inlineCode",{parentName:"p"},"useMetadata")," allows converting the program's metadata (",(0,r.kt)("inlineCode",{parentName:"p"},".txt")," file) into the required format."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import { useEffect, useState } from 'react';\nimport {\n  getProgramMetadata,\n  ProgramMetadata\n} from '@gear-js/api';\nimport { Buffer } from 'buffer';\n\nexport const useMetadata = (source: RequestInfo | URL) => {\n  const [data, setData] = useState<ProgramMetadata>();\n\n  useEffect(() => {\n    fetch(source)\n      .then((res) => res.text())\n      .then((raw) => getProgramMetadata(`0x${raw}`))\n      .then((meta) => setData(meta));\n  }, [source]);\n\n  return { metadata: data };\n};\n")),(0,r.kt)("h3",{id:"usewasmmetadata"},"useWasmMetadata"),(0,r.kt)("p",null,"This hook is auxiliary and it is not pre-installed in the react-hook library. ",(0,r.kt)("inlineCode",{parentName:"p"},"useWasmMetadata")," allows getting Buffer array from the program ",(0,r.kt)("inlineCode",{parentName:"p"},"meta.wasm"),". Buffer is required always when using custom functions to query specific parts of the program State."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import { useEffect, useState } from 'react';\nimport { Buffer } from 'buffer';\n\nexport const useWasmMetadata = (source: RequestInfo | URL) => {\n\n  const [data, setData] = useState<Buffer>();\n\n  useEffect(() => {\n    if (source) {\n      fetch(source)\n        .then((response) => response.arrayBuffer())\n        .then((array) => Buffer.from(array))\n        .then((buffer) => setData(buffer))\n        .catch(({ message }: Error) => console.error(`Fetch error: ${message}`));\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [source]);\n\n  return { buffer: data };\n};\n")),(0,r.kt)("h3",{id:"usesendmessage"},"useSendMessage"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"useSendMessage")," allows sending messages to the program."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import { useSendMessage } from '@gear-js/react-hooks';\nimport { useMetadata } from './useMetadata';\nimport meta from 'assets/meta/meta.txt';\n\nfunction sendMessage() {\n  const programId = '0x01';\n  const { metadata } = useMetadata(meta);\n\n  return useSendMessage(programId, metadata);\n}\n")),(0,r.kt)("h3",{id:"usereadfullstate"},"useReadFullState"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"useReadFullState")," allows reading full program State."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import { useReadFullState } from '@gear-js/react-hooks';\nimport { useMetadata } from './useMetadata';\nimport meta from 'assets/meta/meta.txt';\n\nfunction readFullState() {\n  const programId = '0x01';\n  const { metadata } = useMetadata(meta);\n\n  const { state } = useReadFullState(programId, metadata);\n\n  return state;\n}\n")),(0,r.kt)("h3",{id:"usereadwasmstate"},"useReadWasmState"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"useReadWasmState")," allows reading program ",(0,r.kt)("inlineCode",{parentName:"p"},"State")," using specific functions."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import { useReadWasmState } from '@gear-js/react-hooks';\nimport { useWasmMetadata } from './useMetadata';\nimport stateMetaWasm from 'assets/wasm/state.meta.wasm';\n\nfunction useProgramState<T>(functionName: string, payload?: any) {\n  const programId = '0x01';\n  const { buffer } = useWasmMetadata(stateMetaWasm);\n\n  return useReadWasmState<T>(\n    programId,\n    buffer,\n    functionName,\n    payload,\n  );\n}\n\nfunction firstState() {\n  const payload = 'some_payload'\n  const { state } = useProgramState('foo_1', payload);\n  return state;\n}\n\nfunction secondState() {\n  // if program state function doesn't have initial payload\n  const { state } = useProgramState('foo_2', null);\n  return state;\n}\n")),(0,r.kt)("h3",{id:"usecreatehandler"},"useCreateHandler"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"useCreateHandler")," provides a tool for uploading the Gear program to the chain."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import { useCreateHandler } from '@gear-js/react-hooks';\nimport meta from 'assets/meta/meta.txt';\nimport { useMetadata } from './useMetadata';\n\nexport function useCreateProgram(onSuccess: (programId: Hex) => void) {\n  const codeHash = '0x01';\n  const { metadata } = useMetadata(meta);\n  const createProgram = useCreateHandler(codeHash, meta);\n\n  return (payload) => createProgram(payload, { onSuccess });\n}\n")))}m.isMDXComponent=!0}}]);