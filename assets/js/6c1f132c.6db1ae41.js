"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[6405],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>u});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),l=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=l(e.components);return a.createElement(p.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},N=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,p=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),c=l(n),N=r,u=c["".concat(p,".").concat(N)]||c[N]||d[N]||s;return n?a.createElement(u,i(i({ref:t},m),{},{components:n})):a.createElement(u,i({ref:t},m))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,i=new Array(s);i[0]=N;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[c]="string"==typeof e?e:r,i[1]=o;for(var l=2;l<s;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}N.displayName="MDXCreateElement"},8113:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>o,toc:()=>l});var a=n(7462),r=(n(7294),n(3905));const s={sidebar_label:"NFT frontend application",sidebar_position:3},i="NFT frontend application",o={unversionedId:"examples/nft-marketplace/nft-application",id:"examples/nft-marketplace/nft-application",title:"NFT frontend application",description:"This article explains how to create a React application and connect it to an NFT smart contract running in the blockchain.",source:"@site/docs/examples/nft-marketplace/nft-application.md",sourceDirName:"examples/nft-marketplace",slug:"/examples/nft-marketplace/nft-application",permalink:"/docs/examples/nft-marketplace/nft-application",draft:!1,editUrl:"https://github.com/gear-tech/wiki/edit/master/docs/examples/nft-marketplace/nft-application.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_label:"NFT frontend application",sidebar_position:3},sidebar:"docs",previous:{title:"Subsquid indexing",permalink:"/docs/examples/nft-marketplace/subsquid-marketplace"},next:{title:"RMRK NFT standard",permalink:"/docs/examples/rmrk"}},p={},l=[{value:"Preparation",id:"preparation",level:3},{value:"Create-NFT page",id:"create-nft-page",level:3},{value:"Upload image and mint NFT",id:"upload-image-and-mint-nft",level:3},{value:"Home page",id:"home-page",level:3}],m={toc:l},c="wrapper";function d(e){let{components:t,...s}=e;return(0,r.kt)(c,(0,a.Z)({},m,s,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"nft-frontend-application"},"NFT frontend application"),(0,r.kt)("p",null,"This article explains how to create a ",(0,r.kt)("inlineCode",{parentName:"p"},"React")," application and connect it to an ",(0,r.kt)("a",{parentName:"p",href:"./../gnft-721"},"NFT smart contract")," running in the blockchain."),(0,r.kt)("h3",{id:"preparation"},"Preparation"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"First clone the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/LouiseMedova/gear-app-starter"},"frontend-starter"),". Install ",(0,r.kt)("a",{parentName:"p",href:"https://nodejs.org/en/download/"},"NodeJs")," and ",(0,r.kt)("a",{parentName:"p",href:"https://docs.npmjs.com/downloading-and-installing-node-js-and-npm"},"NPM"),". Make sure you have the latest LTS version of the NodeJs installed. ")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Then install yarn:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"npm install --global yarn \n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"There is an ",(0,r.kt)("inlineCode",{parentName:"p"},".env.example")," file. Create your own ",(0,r.kt)("inlineCode",{parentName:"p"},".env")," file and copy the contents of ",(0,r.kt)("inlineCode",{parentName:"p"},".env.example")," to your ",(0,r.kt)("inlineCode",{parentName:"p"},".env")," file. It contains the following variables:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"REACT_APP_NODE_ADDRESS"),": This variable defines the node we'll be working on."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"REACT_APP_CONTRACT_ADDRESS"),": The address of the contract uploaded to the chain."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"REACT_APP_IPFS_ADDRESS")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"REACT_APP_IPFS_GATEWAY_ADDRESS"),": These variables are needed when we upload media files to IPFS. "))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Upload the contract to the chain and set up the address in the ",(0,r.kt)("inlineCode",{parentName:"p"},".env")," file. Place the ",(0,r.kt)("inlineCode",{parentName:"p"},"meta.txt")," file in the ",(0,r.kt)("inlineCode",{parentName:"p"},"assets/meta")," folder and the ",(0,r.kt)("inlineCode",{parentName:"p"},"nft_state.meta.wasm")," file in the ",(0,r.kt)("inlineCode",{parentName:"p"},"assets/wasm folder"),".")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Install packages:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"yarn install\n")),(0,r.kt)("p",{parentName:"li"},"and run the application:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"yarn start\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"The main file ",(0,r.kt)("inlineCode",{parentName:"p"},"App.tsx")," is simple:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { useApi, useAccount } from '@gear-js/react-hooks';\nimport { Routing } from 'pages';\nimport { Header, Footer, ApiLoader } from 'components';\nimport { withProviders } from 'hocs';\nimport 'App.scss';\n\nfunction Component() {\nconst { isApiReady } = useApi();\nconst { isAccountReady } = useAccount();\n\nconst isAppReady = isApiReady && isAccountReady;\n\nreturn (\n    <>\n    <Header isAccountVisible={isAccountReady} />\n    <main>{isAppReady ? <Routing /> : <ApiLoader />}</main>\n    <Footer />\n    </>\n);\n}\n\nexport const App = withProviders(Component);\n")),(0,r.kt)("p",{parentName:"li"},"It checks whether the application is connected to the chain:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const { isApiReady } = useApi();\n")),(0,r.kt)("p",{parentName:"li"},"It checks whether the account is connected to the application through the web extension:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const { isAccountReady } = useAccount();\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"If the ",(0,r.kt)("inlineCode",{parentName:"p"},"api")," is ready and the ",(0,r.kt)("inlineCode",{parentName:"p"},"account")," is connected, it displays the application's pages. Let's navigate to the ",(0,r.kt)("inlineCode",{parentName:"p"},"pages")," folder. The project has only one page ",(0,r.kt)("inlineCode",{parentName:"p"},"Home"),". The ",(0,r.kt)("inlineCode",{parentName:"p"},"index.tsx")," file is also simple:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Route, Routes } from 'react-router-dom';\nimport { Home } from './home/Home';\n\nconst routes = [\n{ path: '/', Page: Home },\n];\n\nexport function Routing() {\nconst getRoutes = () => routes.map(({ path, Page }) => \n<Route key={path} path={path} element={<Page />} />\n);\n\nreturn <Routes>{getRoutes()}</Routes>;\n}\n")))),(0,r.kt)("h3",{id:"create-nft-page"},"Create-NFT page"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Let's create a page for NFT creation."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"mkdir src/pages/create-nft\ntouch src/pages/create-nft/CreateNft.tsx\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Then move the file with styles from ",(0,r.kt)("inlineCode",{parentName:"p"},"assets")," folder to the ",(0,r.kt)("inlineCode",{parentName:"p"},"create-nft")," folder:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"mv src/assets/styles/CreateNft.module.scss src/pages/create-nft \n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Let's start writing the ",(0,r.kt)("inlineCode",{parentName:"p"},"CreateNft.tsx"),":"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import styles from 'CreateNft.module.scss'\n\nexport function CreateNft() {\n    return (\n        <div>Create NFT</div>\n    )\n}\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"We should declare this page in the ",(0,r.kt)("inlineCode",{parentName:"p"},"index.tsx")," file and also add the route for it:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Route, Routes } from 'react-router-dom';\nimport { CreateNft } from './create-nft/CreateNft';\nimport { Home } from './home/Home';\n\nconst routes = [\n{ path: '/', Page: Home },\n{ path: '/create-nft', Page: CreateNft },\n];\n\nexport function Routing() {\nconst getRoutes = () => routes.map(({ path, Page }) => \n<Route key={path} path={path} element={<Page />} />\n);\n\nreturn <Routes>{getRoutes()}</Routes>;\n}\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Let's create a link to the ",(0,r.kt)("inlineCode",{parentName:"p"},"CreateNft")," page from the ",(0,r.kt)("inlineCode",{parentName:"p"},"Home")," page. In the ",(0,r.kt)("inlineCode",{parentName:"p"},"Home.tsx")," file, let's write:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { Link } from "react-router-dom";\n\nfunction Home() {\nreturn (\n    <Link to="/create-nft">\n    <h3>Create NFT</h3>\n    </Link>\n)\n}\nexport { Home };\n'))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Now let's go back to the ",(0,r.kt)("inlineCode",{parentName:"p"},"CreateNft")," page. First, we create a form that includes the NFT ",(0,r.kt)("inlineCode",{parentName:"p"},"title"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"description"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"image"),":"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { Button, FileInput, Input } from \'@gear-js/ui\'\nimport styles from \'./CreateNft.module.scss\'\n\nexport function CreateNft() {\n    return (\n        <>\n            <h2 className={styles.heading}> Create NFT</h2>\n            <div className={styles.main}>\n                <form className={styles.from}>\n                    <div className={styles.item}>\n                        <Input label="Name" className={styles.input} required/>\n                    </div>\n                    <div className={styles.item}>\n                        <Input label="Description" className={styles.input} required/>\n                    </div>\n                    <div className={styles.item}>\n                        <FileInput label="Image" className={styles.input}  required/>\n                    </div>\n                    <Button type="submit" text="Create" className={styles.button}/>\n                </form>\n            </div>\n        </>\n    )\n}\n'))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Let's create a state that will store the NFT's title, description, and image, and add the functions ",(0,r.kt)("inlineCode",{parentName:"p"},"handleInputChange")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"handleImageChange")," that will update this state:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { Button, FileInput, Input } from \'@gear-js/ui\'\nimport { useState } from \'react\'\nimport styles from \'./CreateNft.module.scss\'\n\nconst NftInitialState = {\n    title: "",\n    description: "",\n}\n\nexport function CreateNft() {\n    const [nftForm, setNftForm] = useState(NftInitialState);\n    const [image, setImage] = useState<File | null>(null)\n    const { title, description } = nftForm;\n\n    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const { name, value } = e.target;        \n        setNftForm(prevForm => ({...prevForm , [name]: value}))\n    }\n\n    return (\n        <>\n            <h2 className={styles.heading}> Create NFT</h2>\n            <div className={styles.main}>\n                <form className={styles.from}>\n                    <div className={styles.item}>\n                        <Input label="Name" className={styles.input} required name="title" value={title} onChange={handleInputChange}/>\n                    </div>\n                    <div className={styles.item}>\n                        <Input label="Description" className={styles.input} required name="description" value={description} onChange={handleInputChange}/>\n                    </div>\n                    <div className={styles.item}>\n                        <FileInput label="Image" className={styles.input} onChange={setImage}/>\n                    </div>\n                    <Button type="submit" text="Create" className={styles.button}/>\n                </form>\n            </div>\n        </>\n    )\n}\n'))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Let's also add the image preview for the uploaded image:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'...\nexport function CreateNft() {\n    ...\n    return (\n        <>\n            <h2 className={styles.heading}> Create NFT</h2>\n            <div className={styles.main}>\n                <form className={styles.from}>\n                    ...\n                    <div className={styles.item}>\n                        <FileInput label="Image" className={styles.input} onChange={setImage}/>\n                        { image ? (\n                            <div className="image-preview">\n                                <img src={URL.createObjectURL(image)} alt="nft" style={{width: 100, height: 100}}/>\n                            </div> \n                        ): (\n                            <p>No image set for this NFT</p>\n                        )}\n                    </div>\n                    <Button type="submit" text="Create" className={styles.button}/>\n                </form>\n            </div>\n        </>\n    )\n}\n')))),(0,r.kt)("h3",{id:"upload-image-and-mint-nft"},"Upload image and mint NFT"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Next, we upload the image to IPFS and send a ",(0,r.kt)("inlineCode",{parentName:"p"},"Mint")," message to the contract.\nInstall the ",(0,r.kt)("a",{parentName:"p",href:"http://docs.ipfs.tech.ipns.localhost:8080/install/ipfs-desktop/#windows"},"IPFS Desktop App"),".")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Navigate to ",(0,r.kt)("inlineCode",{parentName:"p"},"Settings"),":\n",(0,r.kt)("img",{src:n(7005).Z,width:"2870",height:"1788"}),"\nLocate ",(0,r.kt)("inlineCode",{parentName:"p"},"IPFS config"),":\n",(0,r.kt)("img",{src:n(8422).Z,width:"2862",height:"1800"}),"\nand configure the ",(0,r.kt)("inlineCode",{parentName:"p"},"API")," of your node:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},'```\n"API": {\n        "HTTPHeaders": {\n            "Access-Control-Allow-Methods": [\n                "PUT",\n                "GET",\n                "POST"\n            ],\n            "Access-Control-Allow-Origin": [\n                "*", \n                "https://webui.ipfs.io",\n                "http://webui.ipfs.io.ipns.localhost:8080",\n                "http://127.0.0.1:5001"\n            ]\n        }\n    },\n```\n'))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Now we are ready to upload the files from our application. Let's start writing the function:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"...\nimport { useIPFS } from 'hooks';\n...\nexport function CreateNft() {\n    ...\n\n    const ipfs = useIPFS();\n    \n    const createNft = async (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n\n        let cid;\n        if (image) {\n        try {\n            cid = await ipfs.add(image as File)\n        } catch (error) {\n                alert(error)\n        }\n        }\n    }\n    ...\n}\n\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Next, we need to send the message to the contract. But before that, let's create the necessary hooks.\nCreate a file named ",(0,r.kt)("inlineCode",{parentName:"p"},"api.ts")," in the ",(0,r.kt)("inlineCode",{parentName:"p"},"hooks")," folder."))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"touch src/hooks/api.ts\n")),(0,r.kt)("ol",{start:5},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"We'll define the hook ",(0,r.kt)("inlineCode",{parentName:"p"},"useNFTMetadata")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"useSendNFTMessage"),":"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { useSendMessage } from '@gear-js/react-hooks';\nimport metaTxt from 'assets/meta/meta.txt'\nimport { ADDRESS } from 'consts';\nimport { useMetadata } from \"./useMetadata\";\n\nfunction useNFTMetadata() {\n    return useMetadata(metaTxt)\n}\n\nfunction useSendNFTMessage() {\n    const meta = useNFTMetadata()\n    return useSendMessage(ADDRESS.CONTRACT_ADDRESS, meta)\n}\n\nexport {useNFTMetadata, useSendNFTMessage}\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Let's continue writing the ",(0,r.kt)("inlineCode",{parentName:"p"},"CreateNft")," function. We will create the ",(0,r.kt)("inlineCode",{parentName:"p"},"payload")," message and send it to the contract."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"...\nimport { useAccount } from '@gear-js/react-hooks';\nimport { useSendNFTMessage } from 'hooks/api';\nimport { useNavigate } from 'react-router-dom';\n...\n\nexport function CreateNft() {\n    ...\n    const ipfs = useIPFS();\n    const { account }= useAccount();\n    const navigate = useNavigate();\n    const sendMessage = useSendNFTMessage();\n\n    const resetForm = () => {\n        setNftForm(NftInitialState);\n        setImage(null)\n    }\n\n    const createNft = async (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n\n        let cid;\n        if (image) {\n        try {\n            cid = await ipfs.add(image as File)\n        } catch (error) {\n                alert(error)\n        }\n        }\n        const tokenMetadata = {\n            name: title,\n            description,\n            media: cid?.cid.toString(),\n            reference: \"\",\n        }\n        \n        const payload = {\n            Mint: {\n                to: account?.decodedAddress,\n                tokenMetadata,\n            }\n        };\n\n        sendMessage(\n            payload,\n            {\n                onSuccess: () => {\n                    resetForm();\n                    navigate('/')\n                },\n            },\n        );\n    }\n    ...\n}\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"CreateNft")," page is ready. The complete code is as follows:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { useAccount } from \'@gear-js/react-hooks\';\nimport { Button, FileInput, Input } from \'@gear-js/ui\'\nimport { useIPFS } from \'hooks\';\nimport { useSendNFTMessage } from \'hooks/api\';\nimport { useState } from \'react\'\nimport { useNavigate } from \'react-router-dom\';\nimport styles from \'./CreateNft.module.scss\'\n\nconst NftInitialState = {\n    title: "",\n    description: "",\n}\n\nexport function CreateNft() {\n    const [nftForm, setNftForm] = useState(NftInitialState);\n    const [image, setImage] = useState<File | null>(null)\n    const { title, description } = nftForm;\n\n    const handleInputChange = (e: {target: {name: any, value: any }}) => {\n        const { name, value } = e.target;\n        setNftForm({...nftForm, [name]: value})\n    }\n\n    const ipfs = useIPFS();\n    const { account }= useAccount();\n    const navigate = useNavigate();\n    const sendMessage = useSendNFTMessage();\n\n    const resetForm = () => {\n        setNftForm(NftInitialState);\n        setImage(null)\n    }\n\n    const createNft = async (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n\n        let cid;\n        if (image) {\n        try {\n            cid = await ipfs.add(image as File)\n        } catch (error) {\n                alert(error)\n        }\n        }\n        const tokenMetadata = {\n            name: title,\n            description,\n            media: cid?.cid.toString(),\n            reference: "",\n        }\n        \n        const payload = {\n            Mint: {\n                to: account?.decodedAddress,\n                tokenMetadata,\n            }\n        };\n\n        sendMessage(\n            payload,\n            {\n                onSuccess: () => {\n                    resetForm();\n                    navigate(\'/\')\n                },\n            },\n        );\n    }\n    return (\n        <>\n            <h2 className={styles.heading}> Create NFT</h2>\n            <div className={styles.main}>\n                <form className={styles.from} onSubmit={createNft}>\n                    <div className={styles.item}>\n                        <Input label="Name" className={styles.input} required name="title" value={title} onChange={handleInputChange}/>\n                    </div>\n                    <div className={styles.item}>\n                        <Input label="Description" className={styles.input} required name="description" value={description} onChange={handleInputChange}/>\n                    </div>\n                    <div className={styles.item}>\n                        <FileInput label="Image" className={styles.input} onChange={setImage}/>\n                        { image ? (\n                            <div className="image-preview">\n                                <img src={URL.createObjectURL(image)} alt="nft" style={{width: 100, height: 100}}/>\n                            </div> \n                        ): (\n                            <p>No image set for this NFT</p>\n                        )}\n                    </div>\n                    <Button type="submit" text="Create" className={styles.button}/>\n                </form>\n            </div>\n        </>\n    )\n}\n')))),(0,r.kt)("p",null,"In the next section, we will create the ",(0,r.kt)("inlineCode",{parentName:"p"},"Home")," page where we will read and display the minted NFTs."),(0,r.kt)("h3",{id:"home-page"},"Home page"),(0,r.kt)("p",null,"In the ",(0,r.kt)("inlineCode",{parentName:"p"},"api.ts")," file, we will add hooks for reading the contract state."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"First, let's add ",(0,r.kt)("inlineCode",{parentName:"p"},"useNFTState<T>"),", where ",(0,r.kt)("inlineCode",{parentName:"p"},"T")," is the type we expect to read (for example, ",(0,r.kt)("inlineCode",{parentName:"p"},"Token"),"). It will accept the function name and payload if required for the specified function:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import stateMetaWasm from 'assets/wasm/nft_state.meta.wasm'\nimport { useMetadata, useWasmMetadata } from './useMetadata'\nimport metaTxt from 'assets/meta/meta.txt'\nimport { useAccount, useReadWasmState, useSendMessage } from '@gear-js/react-hooks';\nimport { ADDRESS } from 'consts';\n\nfunction useNFTMetadata() {\n    return useMetadata(metaTxt);\n}\n\nfunction useNFTState<T>(functionName: string, payload?: any) {\n    const { buffer } = useWasmMetadata(stateMetaWasm);\n    return useReadWasmState<T>(\n        ADDRESS.CONTRACT_ADDRESS,\n        buffer,\n        functionName,\n        payload\n    )\n}\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Let's read all the tokens our contract has. First, we'll create the type for a token in a separate folder called ",(0,r.kt)("inlineCode",{parentName:"p"},"types"),":"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"mkdir types\ntouch types/index.ts\n")),(0,r.kt)("p",{parentName:"li"},"and add the ",(0,r.kt)("inlineCode",{parentName:"p"},"Token")," description to the ",(0,r.kt)("inlineCode",{parentName:"p"},"index.ts")," file:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { HexString } from "@polkadot/util/types";\n\ntype Token = {\n    approvedAccountIds: HexString[];\n    description: string;\n    id: string;\n    media: string;\n    name: string;\n    ownerId: HexString;\n    reference: string;\n};\n\nexport type { Token };\n'))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Then we can write the ",(0,r.kt)("inlineCode",{parentName:"p"},"useNFTs")," hook:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"...\nimport { Token } from 'types';\n\n...\nfunction useNFTs() {\n    const { state, isStateRead } = useNFTState<Token[]>(\"all_tokens\", null);\n    return { nfts: state, isNftStateRead: isStateRead };\n}\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Now let's start writing the ",(0,r.kt)("inlineCode",{parentName:"p"},"Home")," page:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"\nimport { Loader } from 'components';\nimport { useNFTs } from 'hooks/api';\nimport styles from './Home.module.scss'\n\nfunction Home() {\n\nconst { nfts: state, isNftStateRead: isStateRead } = useNFTs();\nconst isAnyNft = !!nfts?.length;\n\nreturn (\n    <>\n    <header className={styles.header}>\n        <h2 className={styles.heading}>NFTs</h2>\n    </header>\n    {isNftStateRead ? (\n        <>\n        {isAnyNft && <ul className={styles.list}>Display NFTs here</ul>}\n        {!isAnyNft && <h2>There are no NFTs at the moment</h2>}\n        </>\n    ) : (\n        <Loader />\n    )}\n    </>\n)\n}\nexport { Home };\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"We read ",(0,r.kt)("inlineCode",{parentName:"p"},"nfts")," using the previously written hook ",(0,r.kt)("inlineCode",{parentName:"p"},"useNFTs"),":"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const nfts = useNFTs();\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Then we check whether the contract has tokens:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const isAnyNft = !!nfts?.length;\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Let's create a component that will display NFT:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"mkdir pages/home/nft\ntouch pages/home/nft/nft.tsx\n")),(0,r.kt)("p",{parentName:"li"},"and write the component:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { Link } from "react-router-dom";\nimport { getIpfsAddress } from "utils";\nimport styles from \'./nft.module.scss\'\n\ntype Props = {\n    id: string;\n    name: string;\n    media: string\n}\n\nfunction NFT( {id, name, media }: Props) {\n    const to = `/nft/${id}`;\n    const src = getIpfsAddress(media)\n    const text = `#${id}`\n    return (\n        <Link to={to} className={styles.nft}>\n            <img src={src} alt={name}/>\n            <h3 className={styles.heading}>{name}</h3>\n            <p className={styles.text}>{text}</p>\n        </Link>\n    )\n}\n\nexport { NFT };\n'))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Then let's write a function for retrieving all NFTs from the contract in the ",(0,r.kt)("inlineCode",{parentName:"p"},"Home.tsx")," file:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"...\nimport { NFT } from './nft/nft';\n\nfunction Home() {\n\nconst { nfts: state, isNftStateRead: isStateRead } = useNFTs();\nconst isAnyNft = nfts?.length;\n\nconst getNFTs = () => \n    nfts?.map( ({name, id, media}) => (\n    <li key={id}>\n        <NFT id = {id} name = {name} media = {media} />\n    </li>\n    ))\n    \n...\n}\nexport { Home };\n")),(0,r.kt)("p",{parentName:"li"},"The whole code of the ",(0,r.kt)("inlineCode",{parentName:"p"},"Home")," page:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Loader } from 'components';\nimport { useNFTs } from 'hooks/api';\nimport styles from './Home.module.scss'\nimport { NFT } from './nft/nft';\n\nfunction Home() {\n\nconst { nfts: state, isNftStateRead: isStateRead } = useNFTs();\nconst isAnyNft = nfts?.length;\n\nconst getNFTs = () => \n    nfts?.map( ({name, id, media}) => (\n    <li key={id}>\n        <NFT id = {id} name = {name} media = {media} />\n    </li>\n    ))\n    \n   \nreturn (\n    <>\n    <header className={styles.header}>\n        <h2 className={styles.heading}>NFTs</h2>\n    </header>\n    {isNftStateRead ? (\n        <>\n        {isAnyNft && <ul className={styles.list}>{getNFTs()}</ul>}\n        {!isAnyNft && <h2>There are no NFTs at the moment</h2>}\n        </>\n    ) : (\n        <Loader />\n    )}\n    </>\n)\n}\nexport { Home };\n")))))}d.isMDXComponent=!0},8422:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/nn82YO3-11263f3807f1ac54cdbf767b29b421db.png"},7005:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/ssgQSvY-8b3b6237076e1610bef0a2dc823391ad.jpg"}}]);